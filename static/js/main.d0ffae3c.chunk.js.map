{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Card","CardContent","start","end","value","duration","separator","Date","toLocaleDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchedData","console","error","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","FormControl","NativeSelect","defaultChecked","onChange","e","target","i","key","App","state","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d0ffae3c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport './Cards.css';\r\n\r\nexport const Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) return 'Loading...';\r\n    return (\r\n        <div className=\"grid\">\r\n            <Card>\r\n                <CardContent className=\"card infected\">\r\n                    <h2>Infiziert: <CountUp start={0} end={confirmed.value} duration=\"1\" separator=\".\" /></h2>\r\n                    <p>Stand {new Date(lastUpdate).toLocaleDateString('de-DE')}</p>\r\n                </CardContent>\r\n            </Card>\r\n            <Card>\r\n                <CardContent className=\"card recovered\">\r\n                    <h2>Erholt: <CountUp start={0} end={recovered.value} duration=\"1\" separator=\".\" /></h2>\r\n                    <p>Stand {new Date(lastUpdate).toLocaleDateString('de-DE')}</p>\r\n                </CardContent>\r\n            </Card>\r\n            <Card>\r\n                <CardContent className=\"card deaths\">\r\n                    <h2>Verstorben: <CountUp start={0} end={deaths.value} duration=\"1\" separator=\".\" /></h2>\r\n                    <p>Stand {new Date(lastUpdate).toLocaleDateString('de-DE')}</p>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country) changeableUrl = `${url}/countries/${country}`;\r\n     \r\n    try {\r\n        let { data: { confirmed, recovered, deaths, lastUpdate  } } = await axios.get(changeableUrl)\r\n        let fetchedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }\r\n        return fetchedData;\r\n    } catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        let { data } = await axios.get(`${url}/daily`);\r\n\r\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n    }catch (err){\r\n        console.error(err);\r\n    }\r\n}\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport './Chart.css'\r\n\r\nexport const Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({ date }) => date),\r\n                        datasets: [{\r\n                            data: dailyData.map((data) => data.confirmed),\r\n                            label: 'Infiziert',\r\n                            borderColor: '#3333ff',\r\n                            fill: true,\r\n                        }, {\r\n                            data: dailyData.map((data) => data.deaths),\r\n                            label: 'Tode',\r\n                            borderColor: 'red',\r\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                            fill: true,\r\n                        },\r\n                        ],\r\n                    }}\r\n                />\r\n            ) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infiziert', 'Erholt', 'Tod'],\r\n                    datasets: [\r\n                        {\r\n                            label: 'Menschen',\r\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                            data: [confirmed.value, recovered.value, deaths.value],\r\n                        },\r\n                    ],\r\n                }\r\n                }\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Status von ${country}` },\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\n\r\nimport { } from \"./CountryPicker.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nexport const CountryPicker = ({ handleCountryChange }) => {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setCountries(await fetchCountries());\r\n        };\r\n        fetchAPI();\r\n    }, [setCountries]);\r\n\r\n    return (\r\n        <FormControl className=\"formcontrol\">\r\n            <NativeSelect defaultChecked=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Weltweit</option>\r\n                {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport { fetchData } from './api';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    let fetchedData = await fetchData(country);\r\n    this.setState({data: fetchedData, country: country});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Cards data={this.state.data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n        <Chart data={this.state.data} country={this.state.country}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}